#if($chainModel)
    #set($returnVal = ${Bo})
#else
    #set($returnVal = 'void')
#end
package ${pkg.Bo};

#if($springdoc)
import io.swagger.v3.oas.annotations.media.Schema;
#elseif($swagger)
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
#end
    #foreach ($pkg in $table.importPackages)
        #if(!$StringUtil.startsWithIgnoreCase($pkg, "com.baomidou.mybatisplus.annotation") && !$StringUtil.startsWithIgnoreCase($pkg, "com.wingflare.lib.mybatis.plus.base.BaseDoAbstract"))
import ${pkg};
        #end
    #end
#if($entityLombokModel)
import lombok.Getter;
import lombok.Setter;
    #if($chainModel)
import lombok.experimental.Accessors;
    #end
#end
import com.wingflare.lib.core.validation.Update;
import com.fasterxml.jackson.annotation.JsonFormat;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Pattern;


/**
 * <p>
 * ${table.comment} 业务对象
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if($entityLombokModel)
@Getter
@Setter
    #if($chainModel)
@Accessors(chain = true)
    #end
#end
#if($springdoc)
@Schema(name = "${entity}业务对象", description = "${table.comment}")
#elseif($swagger)
@ApiModel(value = "${entity}业务对象", description = "${table.comment}")
#end
public class ${Bo} {
#foreach($field in $table.fields)
    #if(!$setOnNewIgnoreFields.contains($field.columnName))

    #if($field.comment != '')
        #if($springdoc)
    @Schema(description = "${field.comment}")
        #elseif($swagger)
    @ApiModelProperty(value = "${field.comment}")
        #end
    /**
     * ${field.comment} #if($field.keyFlag)(表主键)#end
     */
    #end
    #if($field.propertyType == 'Date')
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    #end
    private ${field.propertyType} ${field.propertyName};
    #end
#end
#if(!$entityLombokModel)
    #foreach($field in $table.fields)
        #if($field.propertyType=='boolean')
            #set($getprefix = 'is')
        #else
            #set($getprefix = 'get')
        #end
        #if(!$setOnNewIgnoreFields.contains($field.columnName))

    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

    public ${returnVal} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        this.${field.propertyName} = ${field.propertyName};
        #if($chainModel)
        return this;
        #end
    }
        #end
    #end

    #if($isOverride)@Override#end
    public String toString() {
        return "${entity}{" +
    #set($foreachOne = false)
    #foreach($field in $table.fields)
        #if(!$setOnNewIgnoreFields.contains($field.columnName))
            #if($foreach.index==0 || !$foreachOne)
                #set($foreachOne = true)
        "${field.propertyName} = " + ${field.propertyName} +
        #else
        ", ${field.propertyName} = " + ${field.propertyName} +
            #end
        #end
    #end
        "}";
    }
#end

}